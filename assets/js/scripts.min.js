var isUploaded1 = false;
var isUploaded2 = false;

function doRefresh() {
    location.reload();
}

function doCompare() {
    var a = $("#csvText1").val();
    var b = $("#csvText2").val();

    var oldDict = {};
    var newDict = {};
    var oldKeys = [];
    var newKeys = [];
    var csvContent = "data:text/csv;charset=utf-8,";
    
    a = $.trim(a).replace(/\s*[\r\n]+\s*/g, "\n").replace(/(<[^\/][^>]*>)\s*/g, "$1").replace(/\s*(<\/[^>]+>)/g, "$1");
    csvArray = $.csv.toArrays(a);
    $.each(csvArray, function(a, c) {
        oldDict[c[1]] = c;
        oldKeys.push(c[1]);
    });

    b = $.trim(b).replace(/\s*[\r\n]+\s*/g, "\n").replace(/(<[^\/][^>]*>)\s*/g, "$1").replace(/\s*(<\/[^>]+>)/g, "$1");
    csvArray = $.csv.toArrays(b);
    $.each(csvArray, function(a, c) {
        newDict[c[1]] = c;
        newKeys.push(c[1]);
    });

    var so = setOps;
    added = so.complement(newKeys, oldKeys);
    deleted = so.complement(oldKeys, newKeys);
    common = so.intersection(oldKeys, newKeys);
    
    var h = "<table>\n";
    var n = "  <thead class='table-dark'>\n";
    var tth = `  <tr>\n
    <th scope="row" >STATUS</th>\n
    <th scope="row" >ASY</th>\n
    <th scope="row" >NAV</th>\n
    <th scope="row" >DESCRIPTION</th>\n
    <th scope="row" >MF1</th>\n
    <th scope="row" >MFC1</th>\n
    <th scope="row" >MF2</th>\n
    <th scope="row" >MFC2</th>\n
    <th scope="row" >MF3</th>\n
    <th scope="row" >MFC3</th>\n
    <th scope="row" >MF4</th>\n
    <th scope="row" >MFC4</th>\n
    <th scope="row" >Reference</th>\n
    <th scope="row" >Qty</th>\n
    <th scope="row" >PH</th>\n
    <th scope="row" >Version</th>\n
    `;
    n += tth;
    n += " </thead>\n<tbody>";
    
    $.each(added, function(a, b) {
        var d = "    <tr class='table-primary'>\n";
        d += " <td>ADDED</td>\n";
        var r = '"'+"ADDED"+'"';
        $.each(newDict[b], function(a, b) {
            d += "      <td>" + b + "</td>\n";
            r += ',"'+b+'"';
        });
        csvContent += r+ "\r\n";
        d += "    </tr>\n";
        n += d;
    });

    $.each(deleted, function(a, b) {
        var d = "    <tr class='table-danger'>\n";
        d += " <td>REMOVED</td>\n";
        var r = '"'+"REMOVED"+'"';
        $.each(oldDict[b], function(a, b) {
            d += "      <td>" + b + "</td>\n";
            r += ',"'+b+'"';
        });
        csvContent += r+ "\r\n";
        d += "    </tr>\n";
        n += d;
    });

    $.each(common, function(a, b) {
        var oldRow = oldDict[b];
        var newRow = newDict[b];
        var  unMatched = [];
        for (index=0; index < newRow.length; index ++){
            if (newRow[index] != oldRow[index]){
                unMatched.push(index);
            }
        }
        if (unMatched.length > 0) {
            var d = "    <tr class='table-warning'>\n";
            d += " <td>CHANGED</td>\n";
            var r = '"'+"CHANGED"+'"';
            $.each(newRow, function(k, v) {
                d += $.inArray(k, unMatched) ? "      <td>" + v + "</td>\n": "      <td class='cell-change' title='Old Value: "+oldRow[k]+"'>" + v + "</td>\n";
                r += ',"'+v+'"';
            });
            csvContent += r+ "\r\n";
            d += "    </tr>\n";
            n += d;
            
        }
    });

    n += "  </tbody>\n";
    h += n;
    h += "</table>";

    g = $("#table-preview");
    g.html(h);
    g.find("table").addClass("table table-responsive");
    $(".output").removeClass("hidden");

    var encodedUri = encodeURI(csvContent);
    var link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("class", "btn btn-success");
    link.setAttribute("download", "report.csv");
    link.innerHTML= "Download report";
    document.getElementById("download").appendChild(link);
}
function showSuccess(num) {
    if (num == 1) {
        $(".file1 .alerts .alert-success").removeClass("hidden");
        window.isUploaded1 = true;
    } else {
        $(".file2 .alerts .alert-success").removeClass("hidden");
        window.isUploaded2 = true;
    }
    if (isUploaded1 && isUploaded2){
        $(".step2").removeClass("hidden");
    }
}
function showError(num) {
    if (num == 1) {
        $(".file1 .alerts .alert-danger").removeClass("hidden");
    } else {
        $(".file2 .alerts .alert-danger").removeClass("hidden");
    }
    $(".step2").addClass("hidden");
}
function hideErrors(num) {
    if (num == 1) {
        $(".file1 .alerts .alert").addClass("hidden");
    } else  {
        $(".file2 .alerts .alert").addClass("hidden");
    }
}
function displayFileContents(a, b, num) {
    b.val("");
    var c = ["text/comma-separated-values", "text/csv", "application/csv", "application/excel", "application/vnd.ms-excel", "application/vnd.msexcel", "text/anytext"];
    if ($.inArray(a.type, c) > -1) {
        var d = new FileReader;
        d.onload = function() {
            b.val(d.result)
        }
        ,
        d.readAsText(a),
        showSuccess(num)
    } else
        showError(num);
    return !1
}

$("#optCaption").change(function() {
    $(".caption").toggleClass("hidden")
});

$(".button-caption-help").click(function(a) {
    a.preventDefault(),
    $(".captionDescription").toggleClass("hidden")
});

$(".preview-csv-contents").click(function(a) {
    a.preventDefault(),
    $(".csv-text-container").toggleClass("hidden")
});

$("#btn-upload-1").click(function(a) {
    a.stopPropagation(),
    a.preventDefault(),
    $("#fileInput1").click()
});

$("#btn-upload-2").click(function(a) {
    a.stopPropagation(),
    a.preventDefault(),
    $("#fileInput2").click()
});

if (window.File && window.FileReader) {
    var fileDrop1 = document.getElementById("filedrop1")
      , fileDrop2 = document.getElementById("filedrop2")
      , fileInput1 = document.getElementById("fileInput1")
      , fileInput2 = document.getElementById("fileInput2");
    $(".file-container").removeClass("hidden"),
    $("label.csv-text").html("Your CSV file contents:"),
    $(".csv-file-contents").addClass("hidden"),
    fileDrop1.className = "visible",
    fileDrop1.ondragover = function() {
        return this.className = "hover",
        !1
    }
    ,
    fileDrop1.ondragend = function() {
        return this.className = "",
        !1
    }
    ,
    fileDrop1.ondrop = function(a) {
        hideErrors(1),
        this.className = "",
        a.preventDefault();
        var b = a.dataTransfer.files[0];
        var mm = $("#csvText1");
        return displayFileContents(b, mm, 1),
        !1
    }
    ,
    fileDrop2.className = "visible",
    fileDrop2.ondragover = function() {
        return this.className = "hover",
        !1
    }
    ,
    fileDrop2.ondragend = function() {
        return this.className = "",
        !1
    }
    ,
    fileDrop2.ondrop = function(a) {
        hideErrors(2),
        this.className = "",
        a.preventDefault();
        var b = a.dataTransfer.files[0];
        var mm = $("#csvText1");
        return displayFileContents(b, mm, 2),
        !1
    }
    ,
    fileInput1.addEventListener("change", function() {
        hideErrors(1);
        var a = fileInput1.files[0];
        var mm = $("#csvText1");
        return displayFileContents(a, mm, 1),
        !1
    })
    ,
    fileInput2.addEventListener("change", function() {
        hideErrors(2);
        var a = fileInput2.files[0];
        var mm = $("#csvText2");
        return displayFileContents(a, mm, 2),
        !1
    });
}


!function() {
    for (var a, b = function() {}, c = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], d = c.length, e = window.console = window.console || {}; d--; )
        a = c[d],
        e[a] || (e[a] = b)
}(),
RegExp.escape = function(a) {
    return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
}
,
function(a) {
    "use strict";
    a.csv = {
        defaults: {
            separator: ",",
            delimiter: '"',
            headers: !0
        },
        hooks: {
            castToScalar: function(a) {
                var b = /\./;
                if (isNaN(a))
                    return a;
                if (b.test(a))
                    return parseFloat(a);
                var c = parseInt(a);
                return isNaN(c) ? null : c
            }
        },
        parsers: {
            parse: function(a, b) {
                function c() {
                    if (i = 0,
                    j = "",
                    b.start && b.state.rowNum < b.start)
                        return h = [],
                        b.state.rowNum++,
                        b.state.colNum = 1,
                        void 0;
                    if (void 0 === b.onParseEntry)
                        g.push(h);
                    else {
                        var a = b.onParseEntry(h, b.state);
                        a !== !1 && g.push(a)
                    }
                    h = [],
                    b.end && b.state.rowNum >= b.end && (k = !0),
                    b.state.rowNum++,
                    b.state.colNum = 1
                }
                function d() {
                    if (void 0 === b.onParseValue)
                        h.push(j);
                    else {
                        var a = b.onParseValue(j, b.state);
                        a !== !1 && h.push(a)
                    }
                    j = "",
                    i = 0,
                    b.state.colNum++
                }
                var e = b.separator
                  , f = b.delimiter;
                b.state.rowNum || (b.state.rowNum = 1),
                b.state.colNum || (b.state.colNum = 1);
                var g = []
                  , h = []
                  , i = 0
                  , j = ""
                  , k = !1
                  , l = RegExp.escape(e)
                  , m = RegExp.escape(f)
                  , n = /(D|S|\n|\r|[^DS\r\n]+)/
                  , o = n.source;
                return o = o.replace(/S/g, l),
                o = o.replace(/D/g, m),
                n = RegExp(o, "gm"),
                a.replace(n, function(a) {
                    if (!k)
                        switch (i) {
                        case 0:
                            if (a === e) {
                                j += "",
                                d();
                                break
                            }
                            if (a === f) {
                                i = 1;
                                break
                            }
                            if ("\n" === a) {
                                d(),
                                c();
                                break
                            }
                            if (/^\r$/.test(a))
                                break;
                            j += a,
                            i = 3;
                            break;
                        case 1:
                            if (a === f) {
                                i = 2;
                                break
                            }
                            j += a,
                            i = 1;
                            break;
                        case 2:
                            if (a === f) {
                                j += a,
                                i = 1;
                                break
                            }
                            if (a === e) {
                                d();
                                break
                            }
                            if ("\n" === a) {
                                d(),
                                c();
                                break
                            }
                            if (/^\r$/.test(a))
                                break;
                            throw new Error("CSVDataError: Illegal State [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                        case 3:
                            if (a === e) {
                                d();
                                break
                            }
                            if ("\n" === a) {
                                d(),
                                c();
                                break
                            }
                            if (/^\r$/.test(a))
                                break;
                            if (a === f)
                                throw new Error("CSVDataError: Illegal Quote [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                            throw new Error("CSVDataError: Illegal Data [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                        default:
                            throw new Error("CSVDataError: Unknown State [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]")
                        }
                }),
                0 !== h.length && (d(),
                c()),
                g
            },
            splitLines: function(a, b) {
                function c() {
                    if (g = 0,
                    b.start && b.state.rowNum < b.start)
                        return h = "",
                        b.state.rowNum++,
                        void 0;
                    if (void 0 === b.onParseEntry)
                        f.push(h);
                    else {
                        var a = b.onParseEntry(h, b.state);
                        a !== !1 && f.push(a)
                    }
                    h = "",
                    b.end && b.state.rowNum >= b.end && (i = !0),
                    b.state.rowNum++
                }
                var d = b.separator
                  , e = b.delimiter;
                b.state.rowNum || (b.state.rowNum = 1);
                var f = []
                  , g = 0
                  , h = ""
                  , i = !1
                  , j = RegExp.escape(d)
                  , k = RegExp.escape(e)
                  , l = /(D|S|\n|\r|[^DS\r\n]+)/
                  , m = l.source;
                return m = m.replace(/S/g, j),
                m = m.replace(/D/g, k),
                l = RegExp(m, "gm"),
                a.replace(l, function(a) {
                    if (!i)
                        switch (g) {
                        case 0:
                            if (a === d) {
                                h += a,
                                g = 0;
                                break
                            }
                            if (a === e) {
                                h += a,
                                g = 1;
                                break
                            }
                            if ("\n" === a) {
                                c();
                                break
                            }
                            if (/^\r$/.test(a))
                                break;
                            h += a,
                            g = 3;
                            break;
                        case 1:
                            if (a === e) {
                                h += a,
                                g = 2;
                                break
                            }
                            h += a,
                            g = 1;
                            break;
                        case 2:
                            var f = h.substr(h.length - 1);
                            if (a === e && f === e) {
                                h += a,
                                g = 1;
                                break
                            }
                            if (a === d) {
                                h += a,
                                g = 0;
                                break
                            }
                            if ("\n" === a) {
                                c();
                                break
                            }
                            if ("\r" === a)
                                break;
                            throw new Error("CSVDataError: Illegal state [Row:" + b.state.rowNum + "]");
                        case 3:
                            if (a === d) {
                                h += a,
                                g = 0;
                                break
                            }
                            if ("\n" === a) {
                                c();
                                break
                            }
                            if ("\r" === a)
                                break;
                            if (a === e)
                                throw new Error("CSVDataError: Illegal quote [Row:" + b.state.rowNum + "]");
                            throw new Error("CSVDataError: Illegal state [Row:" + b.state.rowNum + "]");
                        default:
                            throw new Error("CSVDataError: Unknown state [Row:" + b.state.rowNum + "]")
                        }
                }),
                "" !== h && c(),
                f
            },
            parseEntry: function(a, b) {
                function c() {
                    if (void 0 === b.onParseValue)
                        f.push(h);
                    else {
                        var a = b.onParseValue(h, b.state);
                        a !== !1 && f.push(a)
                    }
                    h = "",
                    g = 0,
                    b.state.colNum++
                }
                var d = b.separator
                  , e = b.delimiter;
                b.state.rowNum || (b.state.rowNum = 1),
                b.state.colNum || (b.state.colNum = 1);
                var f = []
                  , g = 0
                  , h = "";
                if (!b.match) {
                    var i = RegExp.escape(d)
                      , j = RegExp.escape(e)
                      , k = /(D|S|\n|\r|[^DS\r\n]+)/
                      , l = k.source;
                    l = l.replace(/S/g, i),
                    l = l.replace(/D/g, j),
                    b.match = RegExp(l, "gm")
                }
                return a.replace(b.match, function(a) {
                    switch (g) {
                    case 0:
                        if (a === d) {
                            h += "",
                            c();
                            break
                        }
                        if (a === e) {
                            g = 1;
                            break
                        }
                        if ("\n" === a || "\r" === a)
                            break;
                        h += a,
                        g = 3;
                        break;
                    case 1:
                        if (a === e) {
                            g = 2;
                            break
                        }
                        h += a,
                        g = 1;
                        break;
                    case 2:
                        if (a === e) {
                            h += a,
                            g = 1;
                            break
                        }
                        if (a === d) {
                            c();
                            break
                        }
                        if ("\n" === a || "\r" === a)
                            break;
                        throw new Error("CSVDataError: Illegal State [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                    case 3:
                        if (a === d) {
                            c();
                            break
                        }
                        if ("\n" === a || "\r" === a)
                            break;
                        if (a === e)
                            throw new Error("CSVDataError: Illegal Quote [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                        throw new Error("CSVDataError: Illegal Data [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]");
                    default:
                        throw new Error("CSVDataError: Unknown State [Row:" + b.state.rowNum + "][Col:" + b.state.colNum + "]")
                    }
                }),
                c(),
                f
            }
        },
        toArray: function(b, c, d) {
            var c = void 0 !== c ? c : {}
              , e = {};
            e.callback = void 0 !== d && "function" == typeof d ? d : !1,
            e.separator = "separator"in c ? c.separator : a.csv.defaults.separator,
            e.delimiter = "delimiter"in c ? c.delimiter : a.csv.defaults.delimiter;
            var f = void 0 !== c.state ? c.state : {}
              , c = {
                delimiter: e.delimiter,
                separator: e.separator,
                onParseEntry: c.onParseEntry,
                onParseValue: c.onParseValue,
                state: f
            }
              , g = a.csv.parsers.parseEntry(b, c);
            return e.callback ? (e.callback("", g),
            void 0) : g
        },
        toArrays: function(b, c, d) {
            var c = void 0 !== c ? c : {}
              , e = {};
            e.callback = void 0 !== d && "function" == typeof d ? d : !1,
            e.separator = "separator"in c ? c.separator : a.csv.defaults.separator,
            e.delimiter = "delimiter"in c ? c.delimiter : a.csv.defaults.delimiter;
            var f = []
              , c = {
                delimiter: e.delimiter,
                separator: e.separator,
                onParseEntry: c.onParseEntry,
                onParseValue: c.onParseValue,
                start: c.start,
                end: c.end,
                state: {
                    rowNum: 1,
                    colNum: 1
                }
            };
            return f = a.csv.parsers.parse(b, c),
            e.callback ? (e.callback("", f),
            void 0) : f
        },
        toObjects: function(b, c, d) {
            var c = void 0 !== c ? c : {}
              , e = {};
            e.callback = void 0 !== d && "function" == typeof d ? d : !1,
            e.separator = "separator"in c ? c.separator : a.csv.defaults.separator,
            e.delimiter = "delimiter"in c ? c.delimiter : a.csv.defaults.delimiter,
            e.headers = "headers"in c ? c.headers : a.csv.defaults.headers,
            c.start = "start"in c ? c.start : 1,
            e.headers && c.start++,
            c.end && e.headers && c.end++;
            var f = []
              , g = []
              , c = {
                delimiter: e.delimiter,
                separator: e.separator,
                onParseEntry: c.onParseEntry,
                onParseValue: c.onParseValue,
                start: c.start,
                end: c.end,
                state: {
                    rowNum: 1,
                    colNum: 1
                },
                match: !1
            }
              , h = {
                delimiter: e.delimiter,
                separator: e.separator,
                start: 1,
                end: 1,
                state: {
                    rowNum: 1,
                    colNum: 1
                }
            }
              , i = a.csv.parsers.splitLines(b, h)
              , j = a.csv.toArray(i[0], c)
              , f = a.csv.parsers.splitLines(b, c);
            c.state.colNum = 1,
            c.state.rowNum = j ? 2 : 1;
            for (var k = 0, l = f.length; l > k; k++) {
                var m = a.csv.toArray(f[k], c)
                  , n = {};
                for (var o in j)
                    n[j[o]] = m[o];
                g.push(n),
                c.state.rowNum++
            }
            return e.callback ? (e.callback("", g),
            void 0) : g
        },
        fromArrays: function(b, c, d) {
            var c = void 0 !== c ? c : {}
              , e = {};
            if (e.callback = void 0 !== d && "function" == typeof d ? d : !1,
            e.separator = "separator"in c ? c.separator : a.csv.defaults.separator,
            e.delimiter = "delimiter"in c ? c.delimiter : a.csv.defaults.delimiter,
            e.escaper = "escaper"in c ? c.escaper : a.csv.defaults.escaper,
            e.experimental = "experimental"in c ? c.experimental : !1,
            !e.experimental)
                throw new Error("not implemented");
            var f = [];
            for (i in b)
                f.push(b[i]);
            return e.callback ? (e.callback("", f),
            void 0) : f
        },
        fromObjects2CSV: function(b, c, d) {
            var c = void 0 !== c ? c : {}
              , e = {};
            if (e.callback = void 0 !== d && "function" == typeof d ? d : !1,
            e.separator = "separator"in c ? c.separator : a.csv.defaults.separator,
            e.delimiter = "delimiter"in c ? c.delimiter : a.csv.defaults.delimiter,
            e.experimental = "experimental"in c ? c.experimental : !1,
            !e.experimental)
                throw new Error("not implemented");
            var f = [];
            for (i in b)
                f.push(arrays[i]);
            return e.callback ? (e.callback("", f),
            void 0) : f
        }
    },
    a.csvEntry2Array = a.csv.toArray,
    a.csv2Array = a.csv.toArrays,
    a.csv2Dictionary = a.csv.toObjects
}(jQuery);
